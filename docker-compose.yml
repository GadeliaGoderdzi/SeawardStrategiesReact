version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: fullstack_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: fullstackapp
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - fullstack_network

  # Redis Cache (Optional)
  redis:
    image: redis:7.0-alpine
    container_name: fullstack_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fullstack_network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: fullstack_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/fullstackapp?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app/server
      - ./uploads:/app/uploads
      - /app/server/node_modules
    depends_on:
      - mongodb
      - redis
    networks:
      - fullstack_network
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: development
    container_name: fullstack_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_STRIPE_PUBLISHABLE_KEY: pk_test_your_stripe_key_here
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - fullstack_network
    command: npm start

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: fullstack_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - fullstack_network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  fullstack_network:
    driver: bridge